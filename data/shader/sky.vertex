#version 330 core

out vec2 out_uv;
out vec4 out_color;

#define MAX_NUM_TOTAL_LIGHTS 1
struct light
{
    vec4 color;
    vec4 position;
    vec4 power;
};

layout(std140) uniform light_block
{
    light lights[MAX_NUM_TOTAL_LIGHTS];
    int size;
} light_buffer;

#define MAX_NUM_TOTAL_MATRIX 165
layout(std140) uniform matrix_block
{
    mat4 matrix[MAX_NUM_TOTAL_MATRIX];
    int size;
} matrix_buffer;

void main(void)
{
    // Get the model matrix from the uniform buffer
    mat4 pv = matrix_buffer.matrix[0];

    // Texture vertices
    const vec4 vertices[36] = vec4[36]
    (
        // NEAR - XY
        vec4(-2000.0, -2000.0, -2000.0, 1.0), // 0
        vec4( 2000.0, -2000.0, -2000.0, 1.0), // 1
        vec4( 2000.0,  2000.0, -2000.0, 1.0), // 2
        vec4(-2000.0, -2000.0, -2000.0, 1.0), // 0
        vec4( 2000.0,  2000.0, -2000.0, 1.0), // 2
        vec4(-2000.0,  2000.0, -2000.0, 1.0),  // 3

        // FAR - XY - Swapped
        vec4(-2000.0, -2000.0,  2000.0, 1.0), // 0
        vec4(-2000.0,  2000.0,  2000.0, 1.0), // 1
        vec4( 2000.0,  2000.0,  2000.0, 1.0), // 2
        vec4(-2000.0, -2000.0,  2000.0, 1.0), // 0
        vec4( 2000.0,  2000.0,  2000.0, 1.0), // 2
        vec4( 2000.0, -2000.0,  2000.0, 1.0),  // 3

        // BOTTOM - XZ - Swapped
        vec4(-2000.0, -2000.0, -2000.0, 1.0), // 0
        vec4(-2000.0, -2000.0,  2000.0, 1.0), // 1
        vec4( 2000.0, -2000.0,  2000.0, 1.0), // 2
        vec4(-2000.0, -2000.0, -2000.0, 1.0), // 0
        vec4( 2000.0, -2000.0,  2000.0, 1.0), // 2
        vec4( 2000.0, -2000.0, -2000.0, 1.0),  // 3

        // TOP - XZ
        vec4(-2000.0, 2000.0, -2000.0, 1.0), // 0
        vec4( 2000.0, 2000.0, -2000.0, 1.0), // 1
        vec4( 2000.0, 2000.0,  2000.0, 1.0), // 2
        vec4(-2000.0, 2000.0, -2000.0, 1.0), // 0
        vec4( 2000.0, 2000.0,  2000.0, 1.0), // 2
        vec4(-2000.0, 2000.0,  2000.0, 1.0),  // 3

        // LEFT - ZY
        vec4(-2000.0, -2000.0, -2000.0, 1.0), // 0
        vec4(-2000.0,  2000.0, -2000.0, 1.0), // 1
        vec4(-2000.0,  2000.0,  2000.0, 1.0), // 2
        vec4(-2000.0, -2000.0, -2000.0, 1.0), // 0
        vec4(-2000.0,  2000.0,  2000.0, 1.0), // 2
        vec4(-2000.0, -2000.0,  2000.0, 1.0),  // 3

        // RIGHT - ZY - Swapped
        vec4(2000.0, -2000.0, -2000.0, 1.0), // 0
        vec4(2000.0, -2000.0,  2000.0, 1.0), // 1
        vec4(2000.0,  2000.0,  2000.0, 1.0), // 2
        vec4(2000.0, -2000.0, -2000.0, 1.0), // 0
        vec4(2000.0,  2000.0,  2000.0, 1.0), // 2
        vec4(2000.0,  2000.0, -2000.0, 1.0)  // 3
    );

    // Texture uvs
    const vec2 uv[36] = vec2[36]
    (
        // NEAR - XY
        vec2(0.999, 0.333), // 0
        vec2(0.75,  0.333), // 1
        vec2(0.75,  0.666), // 2
        vec2(0.999, 0.333), // 0
        vec2(0.75,  0.666), // 2
        vec2(0.999, 0.666), // 3

        // FAR - XY - Swapped
        vec2(0.25, 0.333), // 0
        vec2(0.25, 0.666), // 1
        vec2(0.5,  0.666), // 2
        vec2(0.25, 0.333), // 0
        vec2(0.5,  0.666), // 2
        vec2(0.5,  0.333),  // 3

        // BOTTOM - XZ - Swapped
        vec2(0.25, 0.001), // 0
        vec2(0.25, 0.333), // 1
        vec2(0.5,  0.333), // 2
        vec2(0.25, 0.001), // 0
        vec2(0.5,  0.333), // 2
        vec2(0.5,  0.001),  // 3

        // TOP - XZ
        vec2(0.25,  0.999), // 0
        vec2(0.5, 0.999), // 1
        vec2(0.5, 0.666), // 2
        vec2(0.25,  0.999), // 0
        vec2(0.5, 0.666), // 2
        vec2(0.25,  0.666),  // 3

        // LEFT ZY
        vec2(0.001,  0.333), // 0
        vec2(0.001,  0.666), // 1
        vec2(0.25, 0.666), // 2
        vec2(0.001,  0.333), // 0
        vec2(0.25, 0.666), // 2
        vec2(0.25, 0.333),  // 3

        // RIGHT - ZY - Swapped
        vec2(0.75,  0.333), // 0
        vec2(0.5, 0.333), // 1
        vec2(0.5, 0.666), // 2
        vec2(0.75,  0.333), // 0
        vec2(0.5, 0.666), // 2
        vec2(0.75,  0.666)  // 3
    );

    // Set uv and position
    out_uv = uv[gl_VertexID];
    out_color = light_buffer.lights[0].color;
    gl_Position = pv*vertices[gl_VertexID];
}
